package com.zxin.basemodel.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zxin.basemodel.entity.MeiZiVideo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MEI_ZI_VIDEO".
*/
public class MeiZiVideoDao extends AbstractDao<MeiZiVideo, Long> {

    public static final String TABLENAME = "MEI_ZI_VIDEO";

    /**
     * Properties of entity MeiZiVideo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ThumbUrl = new Property(1, String.class, "thumbUrl", false, "THUMB_URL");
        public final static Property VideoUrl = new Property(2, String.class, "videoUrl", false, "VIDEO_URL");
        public final static Property Nickname = new Property(3, String.class, "nickname", false, "NICKNAME");
        public final static Property UserId = new Property(4, String.class, "userId", false, "USER_ID");
        public final static Property CreateTime = new Property(5, Long.class, "createTime", false, "CREATE_TIME");
        public final static Property LastTime = new Property(6, Long.class, "lastTime", false, "LAST_TIME");
        public final static Property Topic = new Property(7, String.class, "topic", false, "TOPIC");
        public final static Property Vid = new Property(8, int.class, "vid", false, "VID");
        public final static Property PlayNum = new Property(9, int.class, "playNum", false, "PLAY_NUM");
    }


    public MeiZiVideoDao(DaoConfig config) {
        super(config);
    }
    
    public MeiZiVideoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MEI_ZI_VIDEO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"THUMB_URL\" TEXT," + // 1: thumbUrl
                "\"VIDEO_URL\" TEXT," + // 2: videoUrl
                "\"NICKNAME\" TEXT," + // 3: nickname
                "\"USER_ID\" TEXT," + // 4: userId
                "\"CREATE_TIME\" INTEGER," + // 5: createTime
                "\"LAST_TIME\" INTEGER," + // 6: lastTime
                "\"TOPIC\" TEXT," + // 7: topic
                "\"VID\" INTEGER NOT NULL ," + // 8: vid
                "\"PLAY_NUM\" INTEGER NOT NULL );"); // 9: playNum
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MEI_ZI_VIDEO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MeiZiVideo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String thumbUrl = entity.getThumbUrl();
        if (thumbUrl != null) {
            stmt.bindString(2, thumbUrl);
        }
 
        String videoUrl = entity.getVideoUrl();
        if (videoUrl != null) {
            stmt.bindString(3, videoUrl);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(4, nickname);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(5, userId);
        }
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(6, createTime);
        }
 
        Long lastTime = entity.getLastTime();
        if (lastTime != null) {
            stmt.bindLong(7, lastTime);
        }
 
        String topic = entity.getTopic();
        if (topic != null) {
            stmt.bindString(8, topic);
        }
        stmt.bindLong(9, entity.getVid());
        stmt.bindLong(10, entity.getPlayNum());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MeiZiVideo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String thumbUrl = entity.getThumbUrl();
        if (thumbUrl != null) {
            stmt.bindString(2, thumbUrl);
        }
 
        String videoUrl = entity.getVideoUrl();
        if (videoUrl != null) {
            stmt.bindString(3, videoUrl);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(4, nickname);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(5, userId);
        }
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(6, createTime);
        }
 
        Long lastTime = entity.getLastTime();
        if (lastTime != null) {
            stmt.bindLong(7, lastTime);
        }
 
        String topic = entity.getTopic();
        if (topic != null) {
            stmt.bindString(8, topic);
        }
        stmt.bindLong(9, entity.getVid());
        stmt.bindLong(10, entity.getPlayNum());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MeiZiVideo readEntity(Cursor cursor, int offset) {
        MeiZiVideo entity = new MeiZiVideo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // thumbUrl
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // videoUrl
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // nickname
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // userId
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // createTime
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // lastTime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // topic
            cursor.getInt(offset + 8), // vid
            cursor.getInt(offset + 9) // playNum
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MeiZiVideo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setThumbUrl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setVideoUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNickname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCreateTime(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setLastTime(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setTopic(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setVid(cursor.getInt(offset + 8));
        entity.setPlayNum(cursor.getInt(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MeiZiVideo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MeiZiVideo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MeiZiVideo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
